package ru.comfortsoft.bas.tests.api.objects;

import io.qameta.allure.Owner;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import io.restassured.response.Response;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Tags;
import org.junit.jupiter.api.Test;
import ru.comfortsoft.bas.models.objects.CreateObject400ResponseModel;
import ru.comfortsoft.bas.models.objects.CreateObject404ResponseModel;
import ru.comfortsoft.bas.models.objects.CreateObjectRequestModel;
import ru.comfortsoft.bas.models.objects.CreateObjectResponseModel;
import ru.comfortsoft.bas.tests.api.BaseApi;
import ru.comfortsoft.bas.data.randomData.RandomData;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;

@DisplayName("Create object API tests")
public class CreateObjectDictTests extends BaseApi {
    private RandomData randomValues = new RandomData();

    @Test
    @DisplayName("Create a new object with auto-generated code")
    @Tags({@Tag("smoke"), @Tag("regress")})
    @Severity(SeverityLevel.CRITICAL)
    @Owner("Yulia Azovtseva")
    void createObjectWithAutoGeneratedCodeTest() {
        CreateObjectRequestModel randomDataObject = randomValues.allRequiredParams();
        Response response = objectsApi.createObject(randomDataObject);
        CreateObjectResponseModel responseObject = response.as(CreateObjectResponseModel.class);

        assertAll(
                () -> assertThat(response.getStatusCode()).isEqualTo(200),
                () -> assertThat(responseObject.getCode()).isNotNull(),
                () -> assertThat(responseObject.getAddress()).isEqualTo(randomDataObject.getAddress()),
                () -> assertThat(responseObject.getParentCode()).isEqualTo(randomDataObject.getParentCode())
        );
        objectsApi.deleteObject(responseObject.getCode());
    }

    @Test
    @DisplayName("Create a new object with user-defined code")
    @Tag("regress")
    @Severity(SeverityLevel.NORMAL)
    @Owner("Yulia Azovtseva")
    void createObjectWithUserDefinedCodeTest() {
        CreateObjectRequestModel randomDataObject = randomValues.allRequiredParamsWithCode();
        Response response = objectsApi.createObject(randomDataObject);
        CreateObjectResponseModel responseObject = response.as(CreateObjectResponseModel.class);

        assertAll(
                () -> assertThat(response.getStatusCode()).isEqualTo(200),
                () -> assertThat(responseObject.getAddress()).isEqualTo(responseObject.getAddress()),
                () -> assertThat(responseObject.getParentCode()).isEqualTo(responseObject.getParentCode()),
                () -> assertThat(responseObject.getCode()).isEqualTo(responseObject.getCode())
        );
        objectsApi.deleteObject(responseObject.getCode());
    }

    @Test
    @DisplayName("Attempt to create an object with missing 'name' parameter")
    @Tag("regress")
    @Severity(SeverityLevel.NORMAL)
    @Owner("Yulia Azovtseva")
    void createObjectWithMissedNameParamTest() {
        CreateObjectRequestModel randomDataObject = CreateObjectRequestModel.builder()
                .objType(randomValues.getRandomObjectType().getObjectTypeCode())
                .address(randomValues.generateRandomAddress())
                .parentCode(randomValues.getRandomDistrict().getCode())
                .build();
        Response response = objectsApi.createObject(randomDataObject);
        CreateObject400ResponseModel responseObject = response.as(CreateObject400ResponseModel.class);

        assertAll(
                () -> assertThat(response.getStatusCode()).isEqualTo(400),
                () -> assertThat(responseObject.getErrorCode()).isEqualTo("IllegalParameterError"),
                () -> assertThat(responseObject.getErrorData().getParam()).isEqualTo("name")
        );
    }

    @Test
    @DisplayName("Attempt to create an object with missing 'parentCode' parameter")
    @Tag("regress")
    @Severity(SeverityLevel.NORMAL)
    @Owner("Yulia Azovtseva")
    void createObjectWithMissingParentParamTest() {
        CreateObjectRequestModel randomDataObject = CreateObjectRequestModel.builder()
                .objType(randomValues.getRandomObjectType().getObjectTypeCode())
                .address(randomValues.generateRandomAddress())
                .name("Object Name")
                .build();
        Response response = objectsApi.createObject(randomDataObject);
        CreateObject400ResponseModel responseObject = response.as(CreateObject400ResponseModel.class);

        assertAll(
                () -> assertThat(response.getStatusCode()).isEqualTo(400),
                () -> assertThat(responseObject.getErrorCode()).isEqualTo("IllegalParameterError"),
                () -> assertThat(responseObject.getErrorData().getParam()).isEqualTo("parentCode")
        );
    }

    @Test
    @DisplayName("Attempt to create an object with invalid 'parentCode' parameter")
    @Tag("regress")
    @Severity(SeverityLevel.NORMAL)
    @Owner("Yulia Azovtseva")
    void createObjectWithInvalidParentParamTest() {
        String invalidParentCode = "9999";
        CreateObjectRequestModel randomDataObject = CreateObjectRequestModel.builder()
                .objType(randomValues.getRandomObjectType().getObjectTypeCode())
                .address(randomValues.generateRandomAddress())
                .parentCode(invalidParentCode)
                .name("Object Name")
                .build();
        Response response = objectsApi.createObject(randomDataObject);
        CreateObject404ResponseModel responseObject = response.as(CreateObject404ResponseModel.class);

        assertAll(
                () -> assertThat(response.getStatusCode()).isEqualTo(404),
                () -> assertThat(responseObject.getErrorCode()).isEqualTo("NotFoundError"),
                () -> assertThat(responseObject.getErrorData().getId()).isEqualTo(invalidParentCode)
        );
    }
}
